<!-- This is an example interactive audio story written in Welltale Story Language (WSL). -->

<!-- Voices and pronunciations are defined in data files (data.yml or data.json) in your story directory. -->

<!-- The <intro> tag plays content only once: when the player first begins a story. -->
<intro>
  <!-- The <music> tag generates a music clip according to a prompt -->
  <music duration="10000" background="true">
    Epic fantasy orchestral music for the beginning of an exciting, dangerous quest
  </music>

  <!-- <sleep> is used for creating a timed pause in the story flow, useful for building suspense -->
  <sleep duration="3000" />

  <!--
    The <p> tag plays spoken content, automatically converting the text to speech.
    You can use {{ }} template pattern to inject dynamic content into your text.
    Here, we are referencing values defined in our data.yml file.
  -->
  <p>
    You're playing {{title}}, by {{author}}.
  </p>
</intro>

<!-- The <resume> tag plays content any time a story is resumed. It does not play on the first playthrough. -->
<resume>
  <!-- If no `voice` is specified, a default voice will be used. -->
  <p>
    Welcome back to {{title}}, by {{author}}.
  </p>
</resume>

<!--
  The <origin> tag defines your story's actual starting point. It only plays once per story.
  It plays after the <intro> tag; or, if no <intro> tag is present, it played first.
  If no <origin> tag is given then playback will begin with the first top-level tag.
-->
<origin>
  <!-- The `voice` attribute here specifies the generated voice to use -->
  <p voice="narrator">
    Dark forces gather in the land of Eldoria.
  </p>
  
  <p voice="narrator">
    You've arrived at an ancient crossroads in the wilderness. The sun is setting.
    Two paths lie before you: one leads into a dark forest, the other toward a misty swamp.
    Which path do you choose?
  </p>

  <!--
    With the <input> tag, the story pauses to collect the user's input.
    Their input gets stored in an `input` state variable, which you can use in your story logic.
  -->
  <input />

  <!--
    The <llm:score> tag is one of many AI-based tags that lets you drive your story.
    It creates a data set with each attribute scored according to its value.
    The `key` tag determines what variable the data gets stored in.
  -->
  <llm:score
    key="choice"
    woods="the player chooses the woods"
    swamp="the player chooses the swamp">
    The player has a choice between visiting the woods and the swamp. Based on their input, which do they choose?
    {{input}}
  </llm:score>

  <if cond="choice.woods > choice.swamp">
    <p voice="narrator">
      You make your way down the path into the darkening forest.
    </p>
    <jump to="woods" />
  </if>

  <p voice="narrator">
    You trudge toward the misty swamp ahead.
  </p>
  <jump to="swamp" />
</origin>

<!--
  The <macro> tag lets you transform tags in your story to make authoring easier.
  Instead of writing `<p voice="narrator">` over and over, this macro lets us use `<narrator>` anywhere in the story.
-->
<macro match="narrator">
  <rename to="p" />
  <set attr="voice" value="narrator" />
</macro>

<!--
  <div> tags are just containers for content. Container tags are in the order they are written.
  You can also
-->
<div id="woods">
  <narrator>
    As your eyes adjust to the dark, you look around at the trees.
  </narrator>

  <narrator>
    <!-- With the {% %} template pattern, you can use a prompt for generative AI to create story content. -->
    You see {% short, suspenseful description of a dark forest in present tense %}.
  </narrator>

  <!--
    The <checkpoint> tag indicates a point to which the player may rewind the story.
    Every visit to an <input> also creates a checkpoint, but you can use <checkpoint> to explicitly create one.
  -->
  <checkpoint />

  <narrator>
    From somewhere within the thicket of trees, you hear a strange voice.
  </narrator>

  <!-- Macros and voices can also be defined in your data files; see data.yml for how <wretch> is defined -->
  <wretch>
    Who goes there...?
  </wretch>

  <narrator>
    Upon hearing this voice, you freeze in your tracks. You can't see where the voice came from.
  </narrator>

  <wretch>
    I be the keeper of these woods.
    I eat all who tresspass, starting with theys toes.
    Only thems who answer me riddle may pass.
  </wretch>

  <!--
    The <llm:generate> tag can be used to generate content using AI from a prompt.
    Here we also use {$ $} template pattern syntax for inline JavaScript fragments.
  -->
  <llm:generate
    key="riddle"
    question="the full riddle question"
    answer="answer to the riddle">
    Create a short riddle that works in a medieval British fantasy setting.
    Give your response in two parts: the question, and the answer.
    The answer should be a single word related to {$ randElement(["summer", "winter", "autumn", "spring"]) $}.
    The question should be short and lyrical, with grammar like Gollum.
  </llm:generate>

  <wretch>
    Answer me this:  
    {{riddle.question}}
  </wretch>

  <narrator>
    How do you answer the riddle?
  </narrator>

  <!-- Input can be stored under any state variable you choose, using the `key` tag. -->
  <input key="reply" />

  <!--
    With the <script> tag you can use JavaScript or TypeScript to write programmatic logic.
    By default, all state variables are available in the scope of this script.
    To set a state variable (i.e. to be available after the script runs), use the `set(key, value)` function.
  -->
  <script>
    set("riddleSolved", reply.includes(riddle.answer))
  </script>

  <if cond="riddleSolved">
    <!-- Single-bracket syntax can be used to add emotional inflection to the generated speech -->
    <wretch>
      Ye solved me riddle, [reluctantly] so I'll let ye pass.
      [forcefully] Come not again to these woods, traveler.
    </wretch>
    <narrator>
      With your life (and toes) intact, you continue through the forest.
      Eventually the woods thin and you find yourself in an open field.
    </narrator>

    <!-- An <else> block can be placed inside of an <if> tag for more complex conditional support. --->
    <else>
      <wretch>
        Ye answer was wrong. Which makes me happy, as I've not had a meal in days.
        Hee hee hee, don't even try to run away...
      </wretch>
      <narrator>
        Before you know it, you find yourself in the clutches of this strange creature.
        Giggling, it begins taking off your shoes.
      </narrator>
      <!-- The <sound> tag generates or plays sound effects. -->
      <sound duration="5000">
        Grotesque sound of a mouth chewing and gnawing on meat and gristle
      </sound>
      <jump to="dead" />
    </else>
  </if>

  <!-- The <jump> tag navigates to another section by its id. -->
  <jump to="outpost" />
</div>

<div id="swamp">
  <!-- The <data> tag loads structured data (JSON or YAML) and stores it in a state variable. -->
  <data key="unrhymable" format="yaml">
    - orange
    - silver
    - purple
    - month
    - ninth
    - pint
    - wolf
    - opus
    - dangerous
    - marathon
    - discombobulate
    - rhythm
  </data>

  <narrator>
    You wade into a murky swamp.
    The water reaches your knees, and something moves in the fog ahead.
    Soon, a large, slimy creature emerges from the muck.
  </narrator>

  <!-- Macros and voices can also be defined in your data files; see data.yml -->
  <rhymer>
    Speak a word, and I'll reply in rhyme.
    I'll keep you here till the end of time.
  </rhymer>

  <narrator>
    You try to pass the creature, but it blocks your way.
    Perhaps something you say will cause it to let you pass.
  </narrator>

  <!-- The <var> tag declares or updates a state variable with a name, value, and optional type. -->
  <var name="rhymeTurns" value="0" type="number" />

  <!-- The <while> tag creates a loop that continues while its condition is true. -->
  <while cond="rhymeTurns < 10">
    <input />
    
    <llm:parse
      key="playerWord"
      lastWord="the last word the player said">
      {{input}}
    </llm:parse>

    <!-- Use <script> to check if the player said an unrhymable word and increment the turn counter. -->
    <script>
      const word = playerWord.lastWord?.toLowerCase() || "";
      const isUnrhymable = unrhymable.some(w => word.includes(w));
      set("stumped", isUnrhymable);
      set("rhymeTurns", rhymeTurns + 1);
    </script>

    <if cond="stumped">
      <rhymer>
        [confused] {{playerWord.lastWord}}? But that word... I cannot...
        My rhyming power, I have forgot!
      </rhymer>
      <narrator>
        The creature stumbles backward, thoroughly befuddled.
        You quickly wade past while it mutters to itself.
        Eventually the swamp ends and you find yourself in an open field.
      </narrator>
      <!-- The <break> tag exits the current loop immediately. -->
      <break />
    </if>
    <else>
      <rhymer>
        {% Create a short rhyming response to "{{playerWord.lastWord}}" that blocks the path %}
      </rhymer>
      <if cond="rhymeTurns >= 5">
        <narrator>
          Perhaps you should try a word that's harder to rhyme...
        </narrator>
      </if>
    </else>
  </while>

  <jump to="outpost" />
</div>

<div id="outpost">
  <!-- Initialize player's inventory from external data file -->
  <script>
    set("gold", player.starting_gold);
    set("inventory", player.starting_inventory);
  </script>

  <narrator>
    There is a stone outpost here with a small wooden door. You push it open and find a merchant inside.
  </narrator>

  <!-- Macros and voices can also be defined in your data files; see data.yml for how <merchant> is defined -->
  <merchant>
    [enthusiastically] Ah, a customer! Welcome, welcome! I have many fine wares for sale!
  </merchant>

  <!-- Define reusable transaction blocks -->
  <block id="buy-item">
    <if cond="gold >= price">
      <merchant>
        Excellent choice! The {{item}} is yours for {{price}} gold.
      </merchant>
      <script>
        // Write to session state to persist beyond block scope
        ctx.session.state.gold = gold - price;
        ctx.session.state.inventory = [...inventory, item];
      </script>
      <narrator>
        You purchase the {{item}}. You now have {{gold}} gold remaining.
      </narrator>
    </if>
    <else>
      <merchant>
        [apologetically] Ah, but you need {{price}} gold for the {{item}}. You only have {{gold}}.
      </merchant>
    </else>
  </block>

  <block id="sell-item">
    <script>
      const hasItem = inventory.includes(item);
      set("hasItem", hasItem);
    </script>
    <if cond="hasItem">
      <merchant>
        I'll give you {{price}} gold for your {{item}}.
      </merchant>
      <script>
        // Write to session state to persist beyond block scope
        ctx.session.state.gold = gold + price;
        ctx.session.state.inventory = inventory.filter(i => i !== item);
      </script>
      <narrator>
        You sell the {{item}}. You now have {{gold}} gold.
      </narrator>
    </if>
    <else>
      <merchant>
        [confused] But you don't have a {{item}} to sell me!
      </merchant>
    </else>
  </block>

  <merchant>
    I buy and sell items: {$ Object.entries(shop).map(([name, price]) => `${name} for ${price} gold`).join(', ') $}.
    What catches your eye?
  </merchant>

  <narrator>
    You have {{gold}} gold. Your inventory contains {$ inventory.join(', ') $}.
    What would you like to do?
  </narrator>

  <var name="merchantDone" value="false" type="boolean" />

  <while cond="!merchantDone">
    <input />

    <!-- Use the <llm:tag> tag to classify the player's intent -->
    <llm:tag
      key="intent"
      buy_potion="wants to buy a potion"
      buy_compass="wants to buy a compass"
      buy_sword="wants to buy a sword"
      sell_potion="wants to sell a potion"
      sell_compass="wants to sell a compass"
      sell_sword="wants to sell a sword"
      leave="wants to leave or is done shopping">
      {{input}}
    </llm:tag>

    <if cond="intent.includes('buy_potion')">
      <yield to="buy-item" item="potion" price="{$ shop.potion $}" />
    </if>
    
    <if cond="intent.includes('buy_compass')">
      <yield to="buy-item" item="compass" price="{$ shop.compass $}" />
    </if>

    <if cond="intent.includes('buy_sword')">
      <yield to="buy-item" item="sword" price="{$ shop.sword $}" />
    </if>

    <if cond="intent.includes('sell_potion')">
      <yield to="sell-item" item="potion" price="{$ shop.potion $}" />
    </if>

    <if cond="intent.includes('sell_compass')">
      <yield to="sell-item" item="compass" price="{$ shop.compass $}" />
    </if>

    <if cond="intent.includes('sell_sword')">
      <yield to="sell-item" item="sword" price="{$ shop.sword $}" />
    </if>

    <if cond="intent.includes('leave') || intent.length === 0">
      <merchant>
        [cheerfully] Come back anytime, friend! Safe travels!
      </merchant>
      <var name="merchantDone" value="true" type="boolean" />
    </if>
    <else>
      <if cond="!intent.includes('buy') && !intent.includes('sell')">
        <narrator>
          Anything else? You can buy items, sell items, or leave.
        </narrator>
      </if>
    </else>
  </while>

  <narrator>
    You leave the outpost and continue on your journey.
  </narrator>
  
  <jump to="troll" />
</div>

<div id="troll">
  <narrator>
    After a long walk, you come across an impassable river.
    Over the river spans a rickety wooden bridge.
    A large troll crawls out from beneath and blocks your way.
  </narrator>

  <troll>
    I shan't let ye cross me bridge unless ye pay me toll.
    What have ye to pay with?
  </troll>

  <!--
    With <include> you can pull in separately defined content by referencing its `id` attribute.
    In this case, in the `troll.wsl` file, we defined <module id="troll"> which we include here.
  -->
  <include id="troll" />
</div>

<div id="dead">
  <narrator>
    Unfortunately, you have perished.
    Another adventurer will have to take up your quest.
  </narrator>

  <!--
    The <end> tag ends the story and causes the game to exit.
    If an <outro> is present, it will also be played before the game exits.
  -->
  <end />
</div>

<div id="win">
  <narrator>
    Having survived multiple perils, you look out at the horizon with optimism.
    You forge ahead, ready to continue your adventure.
    The end.
  </narrator>
  <end />
</div>

<!-- The <outro> tag plays once at the end of the story, after all other story content has been finished. -->
<outro>
  <p>
    Thank you for playing {{title}}, by {{author}}.
    We hope you've enjoyed your adventure.
  </p>
</outro>
