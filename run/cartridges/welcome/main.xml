<p>Welcome to Welltale!</p>
<p>Welltale is an interactive audio story platform, and this is how stories are written.</p>
<p>As you can see, stories are declarative XML.</p>
<p>You use tags to control what the audio story says, get user input, branch to different story points, and more.</p>
<p>The most basic tag is what you see here, the &lt;p&gt; tag.</p>
<p>
  Whatever is in a &lt;p&gt; gets spoken aloud to the listener - it could be the narrator or story character.
  We'll get to voicing below, but for now just remember that &lt;p&gt; means someone speaking.
  Each &lt;p&gt; is one chunk of dialog.
  The content inside &lt;p&gt; tags can be long or short, or multi-line.
</p>

<!--
  It's just XML, so comments like this are fine.
  These are only visible to you, the author, and not played as content to the listener.
-->

<p>
  To make a story iteractive, we need to get user input.
  We do this with the &lt;input&gt; tag.
</p>
<p>
  Of course, in a real story, we'd write something like "Please tell me your name."
  And then we'd add the following &lt;input&gt; tag.
</p>
<input to="listenerName" />
<p>
  As the story plays, it will stop at the above point and cue the listener for input.
  Then the input will be avalable as the {{listenerName}} variable.
  We can refer to any variable using Handlebars style syntax.
</p>
<p>Nice to meet you, {{listenerName}}.</p>
<p>
  By default all user input is string.
  But if we want a number, we can do that too using the "as" attribute.
  We might say something like "Hey, listener! What's your favorite number?" and then grab the input as a number like so:
</p>
<input to="favoriteNumber" as="number" />

<p>
  Now that {{listenerName}} gave their {{favoriteNumber}}, we can use that to make the story more interesting.
</p>

<sec>
  <p>
    How can we make it interesting? With more interactivity.
    As you can see, we're now in a &lt;sec&gt; tag. That is, a section.
    You can use &lt;section&gt; too, if the idea of having lots of &lt;sec&gt;s makes you nervous.
  </p>
  <p>
    Sections don't do anything alone - they're just containers, really.
    By default they'll just flow the same way that &lt;p&gt; tags do: one after another.
    But unlike &lt;p&gt;, &lt;sec&gt; can contain more complex content than just text, as we'll see.
    And when you give a section an "id" attribute, you can do something powerful: logical branching.
  </p>
</sec>

<sec id="logical-branching">
  <p>
    Logical (or conditional) branching just means "if this, do that".
    It's up to you, the author to decide what "this" and "that" are, though.
    For example, if the listener gave {{favoriteNumber}}, go to some specific section.
    Let's see how it works.
    Below, we have a conditional expression using &lt;if&gt; and &lt;else&gt; tags.
    When one of the conditions is met, the story flows into the inside of that tag and runs every instruction there.
  </p>
  <p>
    In this case, when we reach the inside of a particular conditional tag, we see a &lt;jump&gt; tag.
    The &lt;jump&gt; tag lets us to jump the story flow to another... you guessed it... section!
    The &lt;jump&gt; tag's "to" attribute points to the "id" of the section we want to jump to.
    So if we say &lt;jump to="x" /&gt; then the narrative will go to &lt;sec id="x" /&gt;.
  </p>
  <p>
    In the "cond" attribute, you can write code expressions to do pretty much any kind of logic you want.
    (Documentation on how to use code expressions is covered later on.)
    For now, take a look at the conditional logic below. Even if you don't know much about code, try to make sense of it.
    Imagine you had been listening to this interactive story, and had said that your favorite number was 123.
    Which section would you end up at?
  </p>
  <if cond="favoriteNumber == 42">
    <jump to="easter-egg" />
  </if>
  <if cond="favoriteNumber > 10">
    <jump to="big-number-path" />
  </if>
  <else>
    <jump to="small-number-path" />
  </else>
</sec>

<sec id="big-number-path">
  <p>
    That's right! If the {{favoriteNumber}} had been 123, you would have ended up right here.
  </p>
  <p>
    But don't rest on your laurels, because we're about to jump to another section.
  </p>
  <jump to="variable-manipulation" />
</sec>

<sec id="small-number-path">
  <p>
    We would have reached this point if {{favoriteNumber}} had been on the smaller side.
    But hey, small can be powerful too.
  </p>
  <jump to="variable-manipulation" />
</sec>

<sec id="easter-egg">
  <p>
    You found the answer to life, the universe, and everything.
    We only would have ended here if the listener's favorite number had been 42.
  </p>
  <p>
    Note how this section doesn't have a jump tag.
    That's because without one, we'll simply flow to whatever the next tag is.
    In this case, it's the section called "variable-manipulation" which happens to be the same place we would have ended up under any of the other conditions.
  </p>
</sec>

<p id="i-am-a-rock-i-am-an-island">
  Actually, you can use &lt;jump&gt; to go to *any* tag that has an id - not just sections - like this one.
  If you jump here, playback will continue in sequence with whatever tag follows this one.
</p>

<sec id="variable-manipulation">
  <p>
    Now we've got a variable. What can we do with it?
  </p>
  <p>
    We can transform it using code expressions, and create other variables.
    The most basic way to do that is like so, with the &lt;var&gt; tag:
  </p>
  <var name="doubled" value="favoriteNumber * 2" />
  <var name="squared" value="favoriteNumber * favoriteNumber" />
  <p>
    Any variable we create using the &lt;var&gt; tag can be referred to using those same Handlebars tags as above.
    The "value" attribute of a &lt;var&gt; set is expected to be a code expression, but normal values work too.
    The doubled value would be {{doubled}}, and the squared value would be, well, {{squared}}.
    Just keep in mind you can only refer to these values *after* they've been set. Otherwise they'd be empty.
  </p>
  <p>
    If you want to write more elaborate code and create multiple variables at once, you can use the &lt;code&gt; tag:
  </p>
  <code>
    magicNumber = favoriteNumber + length(listenerName)
    isLucky = magicNumber % 7 == 0
    luckyMessage = isLucky ? "You're lucky!" : "Not this time." ; somethingElse = 123
  </code>
  <p>
    Each of the variables we created above are now available to render with Handlebars syntax just as above.
  </p>
  <p>
    In code tags, newlines are treated as separators between individual code expressions.
    You can also use semicolons to separate individual code expressions.
    Now the player's magic number is {{magicNumber}}.
    What do you think the "luckyMessage" variable will be here?
  </p>
</sec>

<sec id="sleep">
  <p>
    Now, remember that Welltale is an *audio* story platform.
    It's not about displaying text, it's about speaking it aloud for people to hear.
    And when it comes to audio storytelling, there are times when you might want to playback to wait for half a second...
  </p>
  <sleep duration="500" />
  <p>
    ...for dramatic effect. Just use the &lt;sleep&gt; tag for that! The duration is a value in milliseconds.
    Note: If you wanted to, you could also have referred to a variable in the attribute as well. Like so:
  </p>
  <sleep duration="{{favoriteNumber}}" />
  <p>
    It's actually quite appropriate that we just had a dramatic pause.
    Because we're about unlock another powerful tool to help craft your story:
    Blocks.
  </p>
  <p>
    To explain, let's jump to a block now.
    We can jump to block using the &lt;yield&gt; tag (similar to &lt;jump&gt; but a bit different).
  </p>
  <yield to="a-block" />
  <p>
    ...Right back here.
  </p>
</sec>

<block id="a-block">
  <p>
    Welcome to your first block. Notice it has an id, just like sections.
    But unlike sections, block content is not played automatically.
    It's skipped over during normal playback, and only played when we &lt;yield&gt; to it.
  </p>
  <p>
    Think of them as reusable content that you can visit at any time.
    Nobody points to this block, so it will never get visited.
  </p>
  <p>
    The other critical thing about blocks is, when they're finished, they resume at the point you used &lt;yield&gt;.
    That is, once this block's content finishes, up, we should end up...
  </p>
</block>

<sec>
  <p>
    You can also instruct a block to go to a particular place after finishing. For example:
  </p>
  <yield to="another-block" return="treasure-island" />
  <p>
    (We won't see this content, because the above &lt;yield&gt; is making us redirect to a different place.)
  </p>
</sec>

<block id="another-block">
  <p>
    Here we are in the block, but after we're finished here, we won't return to where we left off.
    We'll instead return to the section marked by the "return" attribute of the block.
  </p>
</block>

<sec id="treasure-island">
  <p>

  </p>
</sec>
